fastfetch

# Enable Powerlevel10k instant prompt. Should stay close to the top of
# ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load
ZSH_THEME="powerlevel10k/powerlevel10k"

# Auto-update behavior
zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':omz:update' frequency 7    # update weekly

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Disable marking untracked files under VCS as dirty for faster git status
DISABLE_UNTRACKED_FILES_DIRTY="true"

# History settings
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS

# Which plugins would you like to load?
plugins=(
    git
    gitignore
    brew
    macos
    node
    npm
    yarn
    docker
    docker-compose
    kubectl
    terraform
    aws
    gcloud
    python
    pip
    pyenv
    rbenv
    rust
    golang
    vscode
    zsh-autosuggestions
    zsh-syntax-highlighting
    colored-man-pages
    command-not-found
    extract
    z
    copypath
    copyfile
    copybuffer
    dirhistory
    jsontools
    urltools
    web-search
    aliases
)

source $ZSH/oh-my-zsh.sh

# User configuration

# Export environment variables
export LANG=en_US.UTF-8
export EDITOR='zed'
export VISUAL='zed'

# PATH configuration
export PATH=$HOME/.local/bin:$PATH
export PATH=/usr/local/bin:$PATH
export PATH=/opt/homebrew/bin:$PATH
export PATH=$HOME/.cargo/bin:$PATH

# Aliases for modern developer workflow
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Git aliases (enhanced)
alias gs='git status'
alias ga='git add'
alias gaa='git add --all'
alias gc='git commit'
alias gcm='git commit -m'
alias gca='git commit -am'
alias gp='git push'
alias gpl='git pull'
alias gl='git log --oneline --graph --decorate --all'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gb='git branch'
alias gd='git diff'
alias gds='git diff --staged'
alias gr='git reset'
alias grh='git reset --hard'
alias grs='git reset --soft'
alias gst='git stash'
alias gstp='git stash pop'
alias gm='git merge'
alias gf='git fetch'

# Modern CLI tool aliases (if installed)
if command -v bat &> /dev/null; then
    alias cat='bat'
fi
if command -v exa &> /dev/null; then
    alias ls='exa -la --git'
fi
if command -v fd &> /dev/null; then
    alias find='fd'
fi
if command -v rg &> /dev/null; then
    alias grep='rg --color=auto'
else
    alias grep='grep --color=auto'
fi
if command -v htop &> /dev/null; then
    alias top='htop'
fi
if command -v dust &> /dev/null; then
    alias du='dust'
fi
if command -v duf &> /dev/null; then
    alias df='duf'
fi

# Development aliases
alias serve='python3 -m http.server'
alias myip='curl -s https://checkip.amazonaws.com'
alias localip='ipconfig getifaddr en0'
alias ports='lsof -i -P -n | grep LISTEN'
alias reload='source ~/.zshrc'
alias zshconfig='zed ~/.zshrc'

# Docker aliases
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps'
alias dpsa='docker ps -a'
alias di='docker images'
alias drm='docker rm'
alias drmi='docker rmi'
alias dprune='docker system prune -af'

# Kubernetes aliases
alias k='kubectl'
alias kgp='kubectl get pods'
alias kgs='kubectl get services'
alias kgd='kubectl get deployments'
alias kaf='kubectl apply -f'
alias kdel='kubectl delete'
alias klog='kubectl logs'
alias kexec='kubectl exec -it'

# Functions
function mkcd() {
    mkdir -p "$@" && cd "$_";
}

function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Advanced git functions
function gac() {
    git add --all && git commit -m "$1"
}

function gacp() {
    git add --all && git commit -m "$1" && git push
}

function ginit() {
    git init && git add . && git commit -m "Initial commit"
}

# Load Powerlevel10k configuration
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Additional customizations
# Enable autosuggestions
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

# Syntax highlighting
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)

# ========================================
# ADDITIONAL HELPFUL ALIASES & FUNCTIONS
# ========================================

# File and Directory Operations
alias md='mkdir -p'
alias rd='rmdir'
alias cp='cp -iv'                    # confirm before overwriting something
alias mv='mv -iv'                    # confirm before overwriting something
alias rm='rm -i'                     # confirm before removing
alias ln='ln -i'                     # confirm before linking
# Note: --preserve-root not available on macOS
alias cls='clear'                    # clear screen
alias c='clear'                      # clear screen shortcut

# Enhanced ls aliases
alias lsa='ls -lah'                  # all files and dirs with human readable sizes
alias lsl='ls -lh'                   # long format with human readable sizes
alias lst='ls -lth'                  # sort by modification time
alias lss='ls -lSh'                  # sort by file size
alias lsr='ls -lRh'                  # recursive ls

# Tree command alternatives
alias tree1='tree -L 1'
alias tree2='tree -L 2'
alias tree3='tree -L 3'

# Process management
alias psg='ps aux | grep'            # search for a process
alias pscpu='ps auxf | sort -nr -k 3' # sort processes by CPU usage
alias psmem='ps auxf | sort -nr -k 4' # sort processes by memory usage
alias killall='killall -v'           # verbose killall

# Network and system
alias ping='ping -c 5'               # ping 5 times by default
alias fastping='ping -c 100 -s.2'    # fast ping
alias wget='wget -c'                  # resume wget by default
alias curl='curl -L'                  # follow redirects by default
alias ipe='curl ipinfo.io/ip'        # external IP
alias ipi='ipconfig getifaddr en0'   # internal IP
alias ss='lsof -i -P -n | grep LISTEN' # show listening ports

# Archives and compression
alias tarx='tar -xvf'                # extract tar
alias tarc='tar -cvf'                # create tar
alias tarz='tar -czvf'               # create tar.gz
alias untar='tar -xvf'
alias ungz='gunzip -k'               # keep original when gunzipping

# System monitoring
alias df='df -h'                     # human readable df
alias du='du -h'                     # human readable du
alias dus='du -sh *'                 # size of directories in current dir
# Note: free and pstree not available on macOS
alias ps='ps aux'                    # show processes
alias mount='mount | column -t'      # make mount output pretty

# Text processing (grep is handled above)
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias h='history'
alias hg='history | grep'
alias j='jobs -l'

# Calendar and date
alias now='date +"%T"'
alias nowtime=now
alias nowdate='date +"%d-%m-%Y"'
alias cal='cal -3'                   # show 3 months by default

# Homebrew aliases (if available)
if command -v brew &> /dev/null; then
    alias brewup='brew update && brew upgrade && brew cleanup'
    alias brewlist='brew list --versions'
    alias brewsearch='brew search'
    alias brewinfo='brew info'
    alias brewdeps='brew deps --tree'
fi

# Node.js/npm aliases
if command -v npm &> /dev/null; then
    alias ni='npm install'
    alias nid='npm install --save-dev'
    alias nig='npm install -g'
    alias nis='npm install --save'
    alias nit='npm install --save-dev @types/'
    alias nu='npm uninstall'
    alias nud='npm uninstall --save-dev'
    alias nug='npm uninstall -g'
    alias nus='npm uninstall --save'
    alias nr='npm run'
    alias ns='npm start'
    alias nt='npm test'
    alias nb='npm run build'
    alias nd='npm run dev'
    alias nw='npm run watch'
    alias nl='npm list'
    alias nls='npm list --depth=0'
    alias nlg='npm list -g --depth=0'
    alias no='npm outdated'
    alias ncu='npx npm-check-updates'
fi

# Python aliases (if available)
if command -v python3 &> /dev/null; then
    alias py='python3'
    alias pip='pip3'
    alias venv='python3 -m venv'
    alias activate='source venv/bin/activate'
    alias freeze='pip freeze > requirements.txt'
    alias pipi='pip install'
    alias pipu='pip install --upgrade'
    alias pipf='pip freeze'
    alias pipl='pip list'
    alias pips='pip show'
fi

# Additional Git aliases and functions
alias gaa='git add -A'
alias gap='git add -p'                # add by patch
alias gau='git add -u'                # add modified files
alias gcam='git commit -a -m'          # add all and commit with message
alias gcb='git checkout -b'           # create and checkout branch
alias gch='git checkout HEAD~1'       # checkout previous commit
alias gcl='git clone'
alias gcln='git clean -f'             # clean untracked files
alias gcount='git shortlog -sn'       # contributor stats
alias gcp='git cherry-pick'
alias gd='git diff'
alias gda='git diff HEAD'             # diff against HEAD
alias gdc='git diff --cached'         # diff staged changes
alias gdw='git diff --word-diff'      # word diff
alias gf='git fetch --all --prune'   # fetch all with pruning
alias gfa='git fetch --all'           # fetch all
alias gfm='git pull'                  # git fetch and merge
alias gfr='git pull --rebase'         # git fetch and rebase
alias gh='git log --oneline --graph --decorate --all' # pretty git log
alias gl='git log --oneline -10'      # short log
alias gld='git log --pretty=format:"%h %ad %s" --date=short --all' # log with dates
alias glg='git log --graph --oneline --decorate --all'
alias glo='git log --oneline'
alias glp='git log --pretty=format:"%h %s" --graph' # pretty log
alias gm='git merge --no-ff'          # merge with merge commit
alias gmt='git mergetool'             # merge tool
alias gp='git push'
alias gpa='git push --all'            # push all branches
alias gpd='git push --delete'         # delete remote branch
alias gpf='git push --force-with-lease' # safer force push
alias gpo='git push origin'           # push to origin
alias gpt='git push --tags'           # push tags
alias gpu='git push -u origin HEAD'   # push and set upstream
alias gr='git remote -v'              # show remotes
alias gra='git remote add'
alias grb='git rebase'
alias grbi='git rebase -i'            # interactive rebase
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'    # hard reset to HEAD
alias gri='git rebase -i'
alias grm='git remote remove'
alias grmc='git rm --cached'          # remove from index
alias grv='git remote -v'
alias gs='git status -sb'             # short status
alias gsh='git show'
alias gss='git status'
alias gst='git stash'
alias gsta='git stash apply'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gsts='git stash save'
alias gt='git tag'
alias gta='git tag -a'                # annotated tag
alias gtd='git tag -d'                # delete tag
alias gtl='git tag -l'                # list tags
alias gu='git pull'                   # git pull
alias gun='git reset HEAD~1'          # undo last commit
alias gup='git pull --rebase'         # pull with rebase
alias gw='git whatchanged'

# Development server aliases
alias serve8000='python3 -m http.server 8000'
alias serve3000='python3 -m http.server 3000'
alias liveserver='live-server --port=3000'

# Quick edits
alias zshrc='zed ~/.zshrc'
alias zshrcs='source ~/.zshrc'
alias gitconfig='zed ~/.gitconfig'
alias sshconfig='zed ~/.ssh/config'
alias vimrc='zed ~/.vimrc'
alias hosts='sudo zed /etc/hosts'

# Directory shortcuts
alias home='cd ~'
alias desktop='cd ~/Desktop'
alias downloads='cd ~/Downloads'
alias documents='cd ~/Documents'


# Quick navigation
alias back='cd $OLDPWD'
alias ..2='cd ../..'
alias ..3='cd ../../..'
alias ..4='cd ../../../..'
alias ..5='cd ../../../../..'

# ========================================
# HELPFUL FUNCTIONS
# ========================================

# Create directory and navigate into it
function mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract any archive
function ex() {
    if [ -f "$1" ] ; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"   ;;
            *.tar.gz)    tar xzf "$1"   ;;
            *.bz2)       bunzip2 "$1"   ;;
            *.rar)       unrar x "$1"   ;;
            *.gz)        gunzip "$1"    ;;
            *.tar)       tar xf "$1"    ;;
            *.tbz2)      tar xjf "$1"   ;;
            *.tgz)       tar xzf "$1"   ;;
            *.zip)       unzip "$1"     ;;
            *.Z)         uncompress "$1";;
            *.7z)        7z x "$1"      ;;
            *.deb)       ar x "$1"      ;;
            *.tar.xz)    tar xf "$1"    ;;
            *.tar.zst)   tar xf "$1"    ;;
            *)           echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find file by name
function ff() {
    find . -type f -name "*$1*" 2>/dev/null
}

# Find directory by name
function fd() {
    find . -type d -name "*$1*" 2>/dev/null
}

# Search for text in files
function ftext() {
    grep -r "$1" . 2>/dev/null
}

# Create a backup copy of a file
function backup() {
    cp "$1"{,.bak}
}

# Quick git commit with message
function qcommit() {
    git add -A && git commit -m "$1"
}

# Quick git commit and push
function qpush() {
    git add -A && git commit -m "$1" && git push
}

# Create a new git repository
function gitinit() {
    git init
    git add .
    git commit -m "Initial commit"
    if [ "$1" != "" ]; then
        git remote add origin "$1"
        git push -u origin main
    fi
}

# Weather function
function weather() {
    curl -s "wttr.in/$1?format=3"
}

# Convert video to gif
function video2gif() {
    ffmpeg -i "$1" -vf "fps=10,scale=320:-1:flags=lanczos" -c:v gif "$2"
}

# Get size of directory
function dirsize() {
    du -sh "${1:-.}" 2>/dev/null
}

# Count files in directory
function countfiles() {
    find "${1:-.}" -type f | wc -l
}

# Process management functions
function psgrep() {
    ps aux | grep "$1" | grep -v grep
}

# Port check function
function portcheck() {
    lsof -i :"$1"
}

# Generate random password
function genpass() {
    openssl rand -base64 ${1:-32}
}

# Decode base64
function decode64() {
    echo "$1" | base64 -d
}

# Encode base64
function encode64() {
    echo "$1" | base64
}

# JSON pretty print
function jsonpp() {
    python3 -m json.tool "$1"
}

# URL encode
function urlencode() {
    python3 -c "import urllib.parse; print(urllib.parse.quote('$1'))"
}

# URL decode
function urldecode() {
    python3 -c "import urllib.parse; print(urllib.parse.unquote('$1'))"
}

# Quick HTTP server with specific port
function serve() {
    local port=${1:-8000}
    python3 -m http.server "$port"
}

# Get HTTP status code
function httpstatus() {
    curl -o /dev/null -s -w "%{http_code}\n" "$1"
}

# Display most used commands
function mostused() {
    history | awk '{print $2}' | sort | uniq -c | sort -nr | head -20
}

# Network information
function netinfo() {
    echo "Network Configuration:"
    echo "====================="
    echo "External IP: $(curl -s https://checkip.amazonaws.com)"
    echo "Internal IP: $(ipconfig getifaddr en0 2>/dev/null || echo 'Not available')"
    echo "Gateway: $(route -n get default 2>/dev/null | grep gateway | awk '{print $2}')"
    echo "DNS Servers: $(scutil --dns | grep nameserver | awk '{print $3}' | sort -u | head -3 | tr '\n' ' ')"
}

# System information
function sysinfo() {
    echo "System Information:"
    echo "=================="
    echo "OS: $(sw_vers -productName) $(sw_vers -productVersion)"
    echo "Kernel: $(uname -r)"
    echo "Uptime: $(uptime | awk '{print $3,$4}' | sed 's/,//')"
    echo "Memory: $(top -l 1 -s 0 | grep PhysMem | awk '{print $2,$4,$6,$8}')"
    echo "CPU: $(sysctl -n machdep.cpu.brand_string)"
    echo "Disk Usage: $(df -h / | tail -1 | awk '{print $3 "/" $2 " (" $5 " used)"}')"
}

# Convert between units
function convert() {
    echo "$1" | bc -l
}

# Timer function
function timer() {
    local N=$1; shift
    (sleep $N && say "$*" &)
    echo "Timer set for $N seconds with message: $*"
}

# Color palette
function colors() {
    for i in {0..16}; do
        printf "\033[48;5;${i}m  "
    done
    printf "\033[0m\n"
}

# Load local customizations if they exist
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
export PATH=/opt/homebrew/bin:$PATH
autoload -U compinit && compinit

# ========================================
# PYWAL INTEGRATION (AFTER POWERLEVEL10K)
# ========================================

# Add pywal binary to PATH
export PATH="$HOME/Library/Python/3.9/bin:$PATH"

# Function to set wallpaper and update colors
function setwal() {
    if [ $# -eq 0 ]; then
        echo "Usage: setwal <image_path>"
        echo "       setwal random     (random from ~/Pictures/Wallpapers/)"
        return 1
    fi

    # Add error handling to prevent terminal closure
    set +e  # Don't exit on error

    # Ensure wallust is in PATH
    export PATH="$HOME/.cargo/bin:$PATH"

    # Check if wallust is available
    if ! command -v wallust >/dev/null 2>&1; then
        echo "❌ Wallust is not installed or not in PATH"
        echo "Please install wallust with: cargo install wallust"
        return 1
    fi

    # Determine the image file path
    local image_path
    if [ "$1" = "random" ]; then
        # Set random wallpaper from Wallpapers directory
        local wallpaper_dir=$(realpath "$HOME/Pictures/Wallpapers")
        if [ ! -d "$wallpaper_dir" ]; then
            wallpaper_dir="$HOME/Pictures"
        fi

        # Use gshuf if available (from coreutils), otherwise use sort -R
        local shuffle_cmd
        if command -v gshuf >/dev/null 2>&1; then
            shuffle_cmd="gshuf"
        elif command -v shuf >/dev/null 2>&1; then
            shuffle_cmd="shuf"
        else
            shuffle_cmd="sort -R"
        fi

        image_path=$(mdfind -onlyin "$HOME/Pictures/Wallpapers" 'kMDItemFSName == "*.jpg"cd || kMDItemFSName == "*.jpeg"cd || kMDItemFSName == "*.png"cd || kMDItemFSName == "*.gif"cd || kMDItemFSName == "*.bmp"cd' | $shuffle_cmd | head -1)

        if [ -z "$image_path" ]; then
            echo "No images found in $wallpaper_dir"
            return 1
        fi
    else
        # Use the provided file path
        if [ ! -f "$1" ]; then
            echo "File not found: $1"
            return 1
        fi
        image_path="$1"
    fi

    # Apply wallpaper and theme changes using wallust
    echo "🎨 Extracting colors from: $(basename "$image_path") (using wallust)"

    # Use wallust in pywal compatibility mode - much simpler than pywal!
    echo "🔧 Running wallust in pywal compatibility mode..."
    if wallust pywal --backend colorz -i "$image_path" -n --saturate 0.8; then
        local exit_code=0
        echo "✅ Colors extracted successfully with wallust"
        
        # Generate colors.json manually since wallust template has issues
        if [[ -f ~/.cache/wal/colors.sh ]]; then
            python3 -c "
import os
import json

# Parse colors.sh to get variables
colors = {}
with open(os.path.expanduser('~/.cache/wal/colors.sh'), 'r') as f:
    for line in f:
        if line.startswith('export '):
            parts = line.strip().split('=', 1)
            if len(parts) == 2:
                key = parts[0].replace('export ', '')
                value = parts[1].strip('\"\'')
                colors[key] = value

# Create JSON structure
json_data = {
    'wallpaper': colors.get('wallpaper', ''),
    'alpha': colors.get('alpha', '100'),
    'special': {
        'background': colors.get('background', ''),
        'foreground': colors.get('foreground', ''),
        'cursor': colors.get('cursor', '')
    },
    'colors': {f'color{i}': colors.get(f'color{i}', '') for i in range(16)}
}

# Write JSON file
with open(os.path.expanduser('~/.cache/wal/colors.json'), 'w') as f:
    json.dump(json_data, f, indent=4)
"
        fi
    else
        echo "❌ Wallust failed to generate colors"
        return 1
    fi

    # Set wallpaper separately using macOS command
    osascript -e "tell application \"Finder\" to set desktop picture to POSIX file \"$image_path\""

    # Update kitty colors
    if [[ "$TERM" == "xterm-kitty" ]] || [[ -n "$KITTY_WINDOW_ID" ]] || command -v kitty >/dev/null 2>&1; then
        python3 "$HOME/.config/wal/scripts/update_kitty.py" 2>/dev/null
        echo "Updated kitty colors"
    else
        echo "Kitty not detected, colors available in ~/.cache/wal/"
    fi

    # Update Zed theme
    if [[ -f ~/dotfiles/config/wal/update_zed.py ]]; then
        echo "Updating Zed theme..."
        if python3 ~/dotfiles/config/wal/update_zed.py 2>/dev/null; then
            echo "Updated Zed theme"
        else
            echo "⚠️  Zed theme update failed (Zed may not be running)"
        fi
    else
        echo "⚠️  Zed update script not found"
    fi

    echo "Applied wallpaper: $(basename "$image_path")"
    return 0
}

# Function to show current wallust/pywal colors
function walcolors() {
    echo "Current wallust color scheme:"
    echo "============================"
    for i in {0..15}; do
        printf "\033[48;5;${i}m  \033[0m Color $i\n"
    done
}

# Apply wallust colors - simplified loading without hooks
if [[ -f ~/.cache/wal/colors.sh ]]; then
    source ~/.cache/wal/colors.sh
fi

# Terminal switching and color update functions
function update-terminal-colors() {
    echo "Updating terminal colors..."

    if [[ "$TERM" == "xterm-kitty" ]] || [[ -n "$KITTY_WINDOW_ID" ]] || command -v kitty >/dev/null 2>&1; then
        python3 "$HOME/.config/wal/scripts/update_kitty.py" 2>/dev/null
        echo "✅ Updated kitty colors"
    else
        echo "❓ Kitty not detected, colors available in ~/.cache/wal/"
    fi
}

function terminal-info() {
    echo "Terminal Information:"
    echo "==================="
    echo "TERM: $TERM"
    echo "TERM_PROGRAM: $TERM_PROGRAM"
    echo "ITERM_SESSION_ID: $ITERM_SESSION_ID"
    echo "KITTY_WINDOW_ID: $KITTY_WINDOW_ID"
    echo ""

    if [[ "$TERM_PROGRAM" == "iTerm.app" ]] || [[ -n "$ITERM_SESSION_ID" ]]; then
        echo "🖥️  Running in iTerm2"
    elif [[ "$TERM" == "xterm-kitty" ]] || [[ -n "$KITTY_WINDOW_ID" ]]; then
        echo "🐱 Running in kitty"
    else
        echo "❓ Terminal type not detected"
    fi

    # Show pywal status
    if [[ -f ~/.cache/wal/colors.json ]]; then
        echo "🎨 Pywal colors available"
        local colors_date=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M" "$HOME/.cache/wal/colors.json" 2>/dev/null)
        echo "   Last updated: $colors_date"
    else
        echo "❌ No pywal colors found"
    fi
}

# Test command for wallust setup
function test-setwal() {
    echo "🧪 Testing wallust setup..."
    echo "=========================="

    # Ensure wallust is in PATH
    export PATH="$HOME/.cargo/bin:$PATH"

    # Check if wallust is installed
    if ! command -v wallust >/dev/null 2>&1; then
        echo "❌ wallust not found. Install with: cargo install wallust"
        return 1
    fi

    echo "✅ wallust found: $(which wallust)"

    # Check for test image
    local test_image="$HOME/Pictures/Wallpapers"
    if [ -d "$test_image" ]; then
        local sample_image=$(find "$test_image" -name "*.jpg" -o -name "*.png" | head -1)
        if [ -n "$sample_image" ]; then
            echo "✅ Test image found: $(basename "$sample_image")"

            # Test wallust in pywal compatibility mode
            echo "🔬 Testing wallust in pywal compatibility mode..."

            if wallust pywal --backend colorz -i "$sample_image" -n --saturate 0.8; then
                echo "✅ Wallust test successful!"
            else
                echo "❌ Wallust test failed"
                return 1
            fi
            # Test terminal detection
            echo ""
            echo "🖥️  Terminal detection:"
            terminal-info

            return 0
        else
            echo "❌ No test images found in $test_image"
            return 1
        fi
    else
        echo "❌ Wallpapers directory not found: $test_image"
        return 1
    fi
}

# The following lines have been added by Docker Desktop to enable Docker CLI completions.
fpath=(/Users/jan/.docker/completions $fpath)
autoload -Uz compinit
compinit
# End of Docker CLI completions

# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/jan/.lmstudio/bin"
# End of LM Studio CLI section


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
