#!/bin/bash

# Setup Kitty Terminal Configuration
# This script creates symlinks for kitty configuration from dotfiles

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="$(dirname "$SCRIPT_DIR")"

# Source and target paths
KITTY_SOURCE_DIR="$DOTFILES_DIR/config/kitty"
KITTY_TARGET_DIR="$HOME/.config/kitty"

print_status "Setting up Kitty configuration..."
print_status "Source: $KITTY_SOURCE_DIR"
print_status "Target: $KITTY_TARGET_DIR"

# Check if source directory exists
if [ ! -d "$KITTY_SOURCE_DIR" ]; then
    print_error "Source kitty config directory not found: $KITTY_SOURCE_DIR"
    exit 1
fi

# Create target directory if it doesn't exist
if [ ! -d "$HOME/.config" ]; then
    print_status "Creating ~/.config directory..."
    mkdir -p "$HOME/.config"
fi

# Handle existing kitty config
if [ -e "$KITTY_TARGET_DIR" ]; then
    if [ -L "$KITTY_TARGET_DIR" ]; then
        print_warning "Existing symlink found, removing..."
        rm "$KITTY_TARGET_DIR"
    elif [ -d "$KITTY_TARGET_DIR" ]; then
        # Backup existing config
        BACKUP_DIR="$KITTY_TARGET_DIR.backup.$(date +%Y%m%d_%H%M%S)"
        print_warning "Backing up existing kitty config to: $BACKUP_DIR"
        mv "$KITTY_TARGET_DIR" "$BACKUP_DIR"

        # Preserve the wallust-generated colors file if it exists
        if [ -f "$BACKUP_DIR/pywal-colors.conf" ]; then
            print_status "Preserving wallust-generated colors..."
            cp "$BACKUP_DIR/pywal-colors.conf" "$KITTY_SOURCE_DIR/"
        fi
    elif [ -f "$KITTY_TARGET_DIR" ]; then
        # It's a file, backup and remove
        BACKUP_FILE="$KITTY_TARGET_DIR.backup.$(date +%Y%m%d_%H%M%S)"
        print_warning "Backing up existing kitty config file to: $BACKUP_FILE"
        mv "$KITTY_TARGET_DIR" "$BACKUP_FILE"
    fi
fi

# Create the symlink
print_status "Creating symlink..."
ln -s "$KITTY_SOURCE_DIR" "$KITTY_TARGET_DIR"

# Verify the symlink was created successfully
if [ -L "$KITTY_TARGET_DIR" ] && [ -d "$KITTY_TARGET_DIR" ]; then
    print_success "Kitty configuration symlinked successfully!"
    print_status "Symlink: $KITTY_TARGET_DIR -> $KITTY_SOURCE_DIR"
else
    print_error "Failed to create symlink"
    exit 1
fi

# Check if MesloLGLDZ Nerd Font is installed
print_status "Checking for MesloLGLDZ Nerd Font..."
if fc-list : family | grep -i "MesloLGLDZ" >/dev/null 2>&1; then
    print_success "MesloLGLDZ Nerd Font is installed"
elif system_profiler SPFontsDataType | grep -i "MesloLGLDZ" >/dev/null 2>&1; then
    print_success "MesloLGLDZ Nerd Font is installed"
else
    print_warning "MesloLGLDZ Nerd Font not found!"
    print_status "To install MesloLGLDZ Nerd Font:"
    echo "  1. Visit: https://github.com/ryanoasis/nerd-fonts/releases"
    echo "  2. Download: Meslo.zip"
    echo "  3. Extract and install the MesloLGLDZ fonts"
    echo "  4. Or use Homebrew: brew install font-meslo-lg-nerd-font"
fi

# Check if kitty is installed
if command -v kitty >/dev/null 2>&1; then
    print_success "Kitty is installed"

    # Try to reload kitty config if kitty is running
    if pgrep -f kitty >/dev/null 2>&1; then
        print_status "Attempting to reload kitty configuration..."
        if kitty @ load-config 2>/dev/null; then
            print_success "Kitty configuration reloaded successfully"
        else
            print_warning "Could not reload kitty config automatically"
            print_status "Please restart kitty or press Cmd+, and then Cmd+R in kitty to reload"
        fi
    else
        print_status "Kitty is not currently running"
    fi
else
    print_warning "Kitty is not installed!"
    print_status "To install kitty:"
    echo "  • macOS: brew install --cask kitty"
    echo "  • Or download from: https://sw.kovidgoyal.net/kitty/"
fi

print_status "Kitty configuration files:"
echo "  • Main config: $KITTY_TARGET_DIR/kitty.conf"
echo "  • Colors: $KITTY_TARGET_DIR/pywal-colors.conf (generated by wallust)"

print_success "Kitty setup complete!"
print_status "You can now:"
echo "  1. Open kitty terminal"
echo "  2. Run 'setwal /path/to/image.jpg' to set colors"
echo "  3. Enjoy your MesloLGLDZ Nerd Font at size 17!"
