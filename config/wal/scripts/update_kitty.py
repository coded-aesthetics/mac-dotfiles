#!/usr/bin/env python3

# Kitty Dynamic Color Configuration Script
# This script creates a kitty color configuration from pywal colors

import json
import os
import sys
import subprocess

def hex_to_rgb(hex_color):
    """Convert hex color to RGB tuple (0-255 range)"""
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

def calculate_luminance(rgb):
    """Calculate the relative luminance of a color"""
    def linearize(c):
        c = c / 255.0
        if c <= 0.03928:
            return c / 12.92
        else:
            return pow((c + 0.055) / 1.055, 2.4)

    r, g, b = [linearize(c) for c in rgb]
    return 0.2126 * r + 0.7152 * g + 0.0722 * b

def find_best_cursor_color(colors, background_rgb):
    """Find the best cursor color that contrasts well with background"""
    bg_luminance = calculate_luminance(background_rgb)
    best_color = None
    best_contrast = 0

    # Check all available colors for best contrast
    candidates = []

    # Add foreground color as primary candidate
    if 'foreground' in colors['special']:
        fg_rgb = hex_to_rgb(colors['special']['foreground'])
        candidates.append(('foreground', fg_rgb, colors['special']['foreground']))

    # Add bright colors (usually better for cursor)
    for i in range(8, 16):  # Bright colors
        color_key = f'color{i}'
        if color_key in colors['colors']:
            color_rgb = hex_to_rgb(colors['colors'][color_key])
            candidates.append((color_key, color_rgb, colors['colors'][color_key]))

    # Add regular colors but skip very dark ones
    for i in range(1, 8):  # Skip color0 (often black)
        color_key = f'color{i}'
        if color_key in colors['colors']:
            color_rgb = hex_to_rgb(colors['colors'][color_key])
            color_luminance = calculate_luminance(color_rgb)
            # Only consider colors that aren't too dark
            if color_luminance > 25:  # Avoid very dark colors (0-255 scale)
                candidates.append((color_key, color_rgb, colors['colors'][color_key]))

    # Find color with best contrast
    for name, rgb, hex_val in candidates:
        luminance = calculate_luminance(rgb)
        # Calculate contrast ratio
        if bg_luminance > luminance:
            contrast = (bg_luminance + 0.05) / (luminance + 0.05)
        else:
            contrast = (luminance + 0.05) / (bg_luminance + 0.05)

        if contrast > best_contrast:
            best_contrast = contrast
            best_color = hex_val

    # Fallback to foreground color if no good contrast found
    if best_color is None and 'foreground' in colors['special']:
        best_color = colors['special']['foreground']

    # Ultimate fallback to white
    if best_color is None:
        best_color = "#ffffff"

    return best_color

def create_kitty_config():
    """Create kitty color configuration from wal colors"""

    # Read wal colors
    wal_colors_file = os.path.expanduser("~/.cache/wal/colors.json")

    if not os.path.exists(wal_colors_file):
        print("Error: wal colors file not found. Run 'wal -i <image>' first.")
        sys.exit(1)

    with open(wal_colors_file, 'r') as f:
        colors = json.load(f)

    # Get background and foreground colors
    bg_color = colors['special']['background']
    fg_color = colors['special']['foreground']

    # Find best cursor color
    bg_rgb = hex_to_rgb(bg_color)
    cursor_color = find_best_cursor_color(colors, bg_rgb)

    print(f"üìç Cursor color set to: {cursor_color} (optimized for visibility)")

    # Create kitty color configuration
    config_lines = [
        "# Kitty color scheme generated by pywal",
        "# Applied with transparency and visual enhancements",
        "",
        "# Basic colors",
        f"foreground {fg_color}",
        f"background {bg_color}",
        f"selection_foreground {bg_color}",
        f"selection_background {fg_color}",
        "",
        "# Cursor colors",
        f"cursor {cursor_color}",
        f"cursor_text_color {bg_color}",
        "",
        "# URL underline color when hovering with mouse",
        f"url_color {colors['colors'].get('color4', fg_color)}",
        "",
        "# Kitty window border colors and terminal bell",
        f"active_border_color {colors['colors'].get('color4', fg_color)}",
        f"inactive_border_color {colors['colors'].get('color8', '#666666')}",
        f"bell_border_color {colors['colors'].get('color1', '#ff0000')}",
        "",
        "# OS Window titlebar colors",
        f"wayland_titlebar_color {bg_color}",
        f"macos_titlebar_color {bg_color}",
        "",
        "# Tab bar colors",
        f"active_tab_foreground {bg_color}",
        f"active_tab_background {colors['colors'].get('color4', fg_color)}",
        f"inactive_tab_foreground {fg_color}",
        f"inactive_tab_background {colors['colors'].get('color8', bg_color)}",
        f"tab_bar_background {bg_color}",
        "",
        "# Colors for marks (marked text in the terminal)",
        f"mark1_foreground {bg_color}",
        f"mark1_background {colors['colors'].get('color4', fg_color)}",
        f"mark2_foreground {bg_color}",
        f"mark2_background {colors['colors'].get('color5', fg_color)}",
        f"mark3_foreground {bg_color}",
        f"mark3_background {colors['colors'].get('color6', fg_color)}",
        "",
        "# The 16 terminal colors",
        ""
    ]

    # Add ANSI colors with smart dark color handling
    for i in range(16):
        color_key = f"color{i}"
        if color_key in colors['colors']:
            color_value = colors['colors'][color_key]

            # For color0 (often black), check if it's too dark and adjust if needed
            if i == 0:
                rgb = hex_to_rgb(color_value)
                luminance = calculate_luminance(rgb)
                bg_luminance = calculate_luminance(bg_rgb)

                # If color0 is too similar to background, use a slightly lighter version
                if abs(luminance - bg_luminance) < 25:  # Too similar (0-255 scale)
                    # Create a slightly lighter version that maintains contrast
                    if bg_luminance < 127:  # Dark background
                        rgb = tuple(min(c + 50, 255) for c in rgb)
                    else:  # Light background
                        rgb = tuple(max(c - 50, 0) for c in rgb)

                    adjusted_hex = '#{:02x}{:02x}{:02x}'.format(*rgb)
                    color_value = adjusted_hex
                    print(f"‚ö†Ô∏è  Adjusted color{i} for better contrast: {adjusted_hex}")

            config_lines.append(f"color{i} {color_value}")

    # Add transparency and visual effects
    config_lines.extend([
        "",
        "# Transparency and visual effects",
        "background_opacity 0.85",
        "dynamic_background_opacity yes",
        "",
        "# Window styling",
        "window_padding_width 8",
        "window_margin_width 0",
        "",
        "# Performance and rendering",
        "repaint_delay 10",
        "input_delay 3",
        "sync_to_monitor yes",
        "",
        "# Font rendering improvements for transparency",
        "text_composition_strategy platform",
        "",
        "# Allow remote control for dynamic updates",
        "allow_remote_control yes",
        "listen_on unix:/tmp/kitty",
        "",
        "# Cursor",
        "cursor_shape block",
        "cursor_blink_interval 0.5",
        "cursor_stop_blinking_after 15.0",
        "",
        "# Mouse",
        "mouse_hide_wait 3.0",
        "url_style curly",
        "",
        "# Terminal bell",
        "enable_audio_bell no",
        "visual_bell_duration 0.0",
        "window_alert_on_bell yes",
        "bell_on_tab no",
        "",
        "# Color scheme name for reference",
        f"# Generated from: {os.path.basename(colors.get('wallpaper', 'unknown'))}"
    ])

    # Ensure kitty config directory exists
    kitty_dir = os.path.expanduser("~/.config/kitty")
    os.makedirs(kitty_dir, exist_ok=True)

    # Write the color configuration
    colors_file = os.path.join(kitty_dir, "pywal-colors.conf")
    with open(colors_file, 'w') as f:
        f.write('\n'.join(config_lines))

    print(f"Created kitty color configuration: {colors_file}")

    # Also create/update the main kitty.conf to include our colors
    main_config = os.path.join(kitty_dir, "kitty.conf")
    include_line = "include pywal-colors.conf"

    # Check if main config exists and if it already includes our colors
    config_exists = os.path.exists(main_config)
    includes_colors = False

    if config_exists:
        with open(main_config, 'r') as f:
            content = f.read()
            includes_colors = include_line in content

    # Add include line if not present
    if not includes_colors:
        mode = 'a' if config_exists else 'w'
        with open(main_config, mode) as f:
            if config_exists:
                f.write('\n\n')
            f.write('# Pywal color integration\n')
            f.write(f'{include_line}\n')
        print(f"Updated {main_config} to include pywal colors")

    # Reload kitty configuration
    try:
        # First try to reload via remote control
        result = subprocess.run(['kitty', '@', 'load-config'],
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print("Reloaded kitty configuration via remote control")
        else:
            # Fallback to signal-based reload
            subprocess.run(['killall', '-USR1', 'kitty'],
                         capture_output=True, timeout=5)
            print("Sent reload signal to kitty")

    except Exception as e:
        print(f"Note: Kitty config created. You may need to restart kitty or reload manually: {e}")

if __name__ == "__main__":
    create_kitty_config()
